module.exports = {
    env: {
        browser: true,
        es6: true,
        node: true,
    },
    extends: [
        'eslint:recommended',
        'plugin:@typescript-eslint/eslint-recommended',
        // "plugin:@typescript-eslint/recommended",
        // "plugin:@typescript-eslint/recommended-requiring-type-checking"
    ],
    globals: {
        Atomics: 'readonly',
        SharedArrayBuffer: 'readonly',
        JSX: 'readonly',
    },
    parser: '@typescript-eslint/parser',
    parserOptions: {
        ecmaFeatures: {
            jsx: true,
            impliedStrict: true,
        },
        ecmaVersion: 2018,
        sourceType: 'module',
    },
    plugins: [
        '@typescript-eslint',
    ],
    ignorePatterns: [
        'dist/*',
        'node_modules/*',
        '.eslintrc.js',
        'compile.js',
        'webpack.*.js',
        'src/**/*.css',
        'src/**/*.scss',
        'src/**/*.js',
    ],
    rules: {
        'arrow-parens': ['off', 'as-needed'],
        'block-scoped-var': 'warn',
        complexity: 'off',
        'consistent-return': 'error',
        'constructor-super': 'error',
        curly: ['error', 'all'],
        'dot-notation': 'error',
        'eol-last': ['warn', 'always'],
        eqeqeq: ['error', 'always', { null: 'never' }],
        'guard-for-in': 'error',
        'linebreak-style': ['error', 'unix'],
        'max-classes-per-file': ['error', 1],
        'new-parens': 'error',
        'no-alert': 'warn',
        'no-bitwise': 'error',
        'no-caller': 'error',
        'no-cond-assign': 'error',
        'no-constant-condition': 'warn',
        'no-console': 'warn',
        'no-debugger': 'warn',
        'no-duplicate-case': 'error',
        'no-empty': 'warn',
        'no-empty-function': 'warn',
        'no-empty-pattern': 'warn',
        'no-eval': 'error',
        'no-extra-bind': 'error',
        'no-extra-semi': 'warn',
        'no-fallthrough': 'warn',
        'no-floating-decimal': 'error',
        'no-global-assign': 'error',
        'no-implicit-globals': 'error',
        'no-implied-eval': 'error',
        'no-invalid-this': 'warn',
        'no-irregular-whitespace': 'warn',
        'no-iterator': 'error',
        'no-labels': 'error',
        'no-lone-blocks': 'error',
        'no-loop-func': 'error',
        'no-new-func': 'error',
        'no-new-wrappers': 'error',
        'no-octal': 'error',
        'no-octal-escape': 'error',
        'no-proto': 'error',
        'no-prototype-builtins': 'off',
        'no-redeclare': 'off', // Overwritten by @typescript-eslint/no-redeclare, which correctly handles function overloading
        'no-return-assign': 'error',
        'no-return-await': 'error',
        'no-self-assign': 'error',
        'no-self-compare': 'error',
        'no-sequences': 'error',
        'no-sparse-arrays': 'error',
        'no-template-curly-in-string': 'error',
        'no-throw-literal': 'error',
        'no-undef': ['error', { typeof: true }],
        'no-undef-init': 'error',
        'no-undefined': 'error',
        'no-unmodified-loop-condition': 'error',
        'no-unreachable': 'warn',
        'no-unsafe-finally': 'error',
        'no-unused-expressions': 'off',
        'no-unused-labels': 'error',
        'no-unused-vars': 'off', // Overwritten by @typescript-eslint/no-unused-vars below
        'no-use-before-define': 'off', // Overwritten by @typescript-eslint-no-use-before-define below
        'no-useless-call': 'error',
        'no-useless-concat': 'error',
        'no-useless-escape': 'error',
        'no-useless-return': 'error',
        'no-var': 'error',
        'no-void': 'error',
        'no-with': 'error',
        'object-shorthand': 'error',
        'one-var': ['error', 'never'],
        'prefer-const': 'error',
        'prefer-object-spread': 'error',
        'quote-props': ['warn', 'as-needed', { keywords: true }],
        radix: 'error',
        // 'react/jsx-uses-vars': 1,
        semi: ['warn', 'always'],
        'use-isnan': 'error',
        'valid-typeof': 'off',
        'wrap-iife': [2, 'inside', { functionPrototypeMethods: true }],
        '@typescript-eslint/adjacent-overload-signatures': 'error',
        '@typescript-eslint/array-type': 'error',
        '@typescript-eslint/ban-types': 'error',
        '@typescript-eslint/explicit-member-accessibility': [
            'error',
            { overrides: { constructors: 'off' } },
        ],
        '@typescript-eslint/interface-name-prefix': 'off',
        '@typescript-eslint/member-ordering': 'off',
        '@typescript-eslint/naming-convention': [
            'warn',
            {
                selector: 'variableLike',
                format: ['PascalCase', 'camelCase', 'UPPER_CASE'],
                filter: {
                    regex:
                        '^(_|app_id|app_ids|ref_id|admin_id|modifier_group|modifier_groups|entity_type|section_ids|item_ids|modifier_group_ids|availability_rules|price_rules|days_of_week|is_paused|pause_until|tax_rate|quantity_rules)$',
                    match: false,
                },
            },
        ],
        '@typescript-eslint/no-empty-interface': 'error',
        '@typescript-eslint/no-explicit-any': 'off',
        '@typescript-eslint/no-misused-new': 'error',
        '@typescript-eslint/no-namespace': 'error',
        '@typescript-eslint/no-parameter-properties': 'off',
        '@typescript-eslint/no-redeclare': 'error',
        '@typescript-eslint/no-this-alias': 'error',
        '@typescript-eslint/no-unused-expressions': 'warn',
        '@typescript-eslint/no-unused-vars': [
            'warn',
            { varsIgnorePattern: 'React|unused', argsIgnorePattern: 'unused' },
        ],
        '@typescript-eslint/triple-slash-reference': 'error',
        '@typescript-eslint/no-use-before-declare': 'off',
        '@typescript-eslint/no-use-before-define': 'error', // this should be an error
        '@typescript-eslint/no-var-requires': 'error', // this should be an error
        '@typescript-eslint/prefer-for-of': 'error',
        '@typescript-eslint/prefer-function-type': 'error',
        '@typescript-eslint/prefer-namespace-keyword': 'error',
        '@typescript-eslint/type-annotation-spacing': 'error',
        '@typescript-eslint/unified-signatures': 'error',
    },
};
